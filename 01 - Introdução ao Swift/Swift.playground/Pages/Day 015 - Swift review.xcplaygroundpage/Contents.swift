import Cocoa

/*
 =============================================================================================
 Criando constantes e vari√°veis
 =============================================================================================
 Swift pode criar constantes e vari√°veis, mas as constantes s√£o geralmente prefer√≠veis.
 */

//Use isso para criar e depois alterar uma string vari√°vel:
var name = "Ted"
name = "Rebecca"


//Se voc√™ n√£o quiser alterar um valor, use uma constante :
let user = "Daphne"


//A fun√ß√£o print() √© √∫til para aprender e depurar e mostra algumas informa√ß√µes sobre uma vari√°vel:
print(user)



/*
 =============================================================================================
 Strings
 =============================================================================================
 */

//As strings do Swift come√ßam e terminam com aspas duplas:
let actor1 = "Tom Cruise"


//E elas funcionam muito bem com emoji tamb√©m:
let actor2 = "Tom Cruise üèÉ‚Äç‚ôÇÔ∏è"


//Se voc√™ quiser aspas duplas dentro de sua string, coloque uma barra invertida antes delas:
let quote = "He tapped a sign saying \"Believe\" and walked away."


//Se voc√™ quiser uma string que abranja v√°rias linhas, comece e termine com tr√™s aspas duplas,assim:
let movie = """
A day in
the life of an
Apple engineer
"""


//O Swift fornece muitas propriedades e m√©todos √∫teis para strings, inclusive .count para ler quantas letras ele possui:
print(actor1.count)


//H√° tamb√©m hasPrefix()e hasSuffix(), que nos permite saber se uma string come√ßa ou termina com letras espec√≠ficas. Strings diferenciam mai√∫sculas de min√∫sculas no Swift, de modo que a segunda verifica√ß√£o retornar√° false.
print(quote.hasPrefix("He"))
print(quote.hasSuffix("Away."))



/*
 =============================================================================================
 Inteiros
 =============================================================================================
 O Swift armazena n√∫meros inteiros usando o tipo Int, que suporta uma variedade de operadores
 matem√°ticos padr√£o:
 */

let score = 10
let higherScore = score + 10
let halvedScore = score / 2


//Ele tamb√©m suporta operadores de atribui√ß√£o compostos que modificam vari√°veis ‚Äã‚Äãno local:
var counter = 10
counter += 5


//Os inteiros v√™m com sua pr√≥pria funcionalidade √∫til, como o m√©todo isMultiple(of:):
let number = 120
print(number.isMultiple(of: 3))


//Voc√™ tamb√©m pode criar n√∫meros inteiros aleat√≥rios em um intervalo espec√≠fico, assim:
let id = Int.random(in: 1...1000)



/*
 =============================================================================================
 Decimais
 =============================================================================================
 Se voc√™ criar um n√∫mero com um ponto decimal, o Swift o considerar√° um Double. O Swift
 considera Doubleum tipo de dados totalmente diferente do Int, e n√£o permite que voc√™ os misture
 */
let score2 = 3.0



/*
 =============================================================================================
 Booleanos
 =============================================================================================
 */

//Swift usa o tipo Bool para armazenar true ou false:
let goodDogs = true
let gameOver = false


//Voc√™ pode inverter um Boolean de true para false chamando seu m√©todo toggle():
var isSaved = false
isSaved.toggle()



/*
 =============================================================================================
 Unindo strings
 =============================================================================================
 Voc√™ pode criar strings a partir de outros dados usando a interpola√ß√£o de strings : escreva
 uma barra invertida dentro de sua string e coloque o nome de uma vari√°vel ou constante entre
 par√™nteses. Quando esse c√≥digo for executado, ele imprimir√° ‚ÄúSou Taylor e tenho 26 anos‚Äù.
 */

let name1 = "Taylor"
let age = 26
let message = "I'm \(name1) and I'm \(age) years old."
print(message)




/*
 =============================================================================================
 Arrays
 =============================================================================================
 */

/** Voc√™ pode agrupar itens em um array como este: */
var colors = ["Red", "Green", "Blue"]
let numbers = [4, 8, 15, 16]
var readings = [0.1, 0.5, 0.8]


/**
 Cada um deles cont√©m diferentes tipos de dados: um strings, um inteiros e um decimal.
 Quando lemos dados de arrays, obtemos o tipo apropriado de volta - a String, a Int ou
 a Double:
 
 Dica: certifique-se de que existe um item no √≠ndice que voc√™ est√° solicitando, caso
 contr√°rio, seu c√≥digo falhar√° ‚Äì seu aplicativo simplesmente parar√° de funcionar.
 */
print(colors[0])
print(readings[2])


/** Se seu array for vari√°vel, voc√™ pode usar append() para adicionar novos itens.*/
colors.append("Tartan")


/**
 O tipo de dados que voc√™ adiciona deve corresponder ao que j√° estava l√°. Os arrays t√™m
 funcionalidades √∫teis, como .count ler quantos itens est√£o em um array ou remove(at:)
 remover um item em um √≠ndice espec√≠fico:
 */

colors.remove(at: 0)
print(colors.count)


/** Voc√™ pode verificar se um array cont√©m um item espec√≠fico usando contains(), assim: */
print(colors.contains("Octarine"))




/*
 =============================================================================================
 Dictionaries
 =============================================================================================
 */

/**
 Os dicion√°rios armazenam v√°rios valores de acordo com uma chave que especificamos. Por exemplo,
 poder√≠amos criar um dicion√°rio para armazenar informa√ß√µes sobre uma pessoa:
 */
let employee = [
    "name": "Taylor",
    "job": "Singer"
]


/**
 Para ler os dados do dicion√°rio, use as mesmas chaves que voc√™ usou ao cri√°-lo. O valor default
 ser√° usado se a chave que solicitamos n√£o existir.
 */
print(employee["name", default: "Unknown"])
print(employee["job", default: "Unknown"])



/*
 =============================================================================================
 Sets
 =============================================================================================
 Sets s√£o semelhantes a arrays, exceto que voc√™ n√£o pode adicionar itens duplicados e
 eles n√£o armazenam itens em uma ordem espec√≠fica. Lembre-se, o SET ignorar√° valores
 duplicados e n√£o lembrar√° a ordem usada no array. Os Sets t√™m uma grande vantagem sobre
 os arrays: o uso contains() em um set √© efetivamente instant√¢neo, n√£o importa quantos
 itens o set contenha ‚Äì mesmo um set com 10.000.000 de itens responder√° instantaneamente.
 */

/** Isso faz um conjunto de n√∫meros: */
var numbers1 = Set([1, 1, 3, 5, 7])
print(numbers1)


/** Adicionar itens a um SET √© feito chamando seu m√©todo insert(), assim: */
numbers1.insert(10)



/*
 =============================================================================================
 Enums
 =============================================================================================
 Um enum √© um conjunto de valores nomeados que podemos criar e usar para tornar nosso c√≥digo
 mais eficiente e seguro.
 */


/**
 Por exemplo, poder√≠amos fazer uma enumera√ß√£o de dias da semana conforme abaixo:
 Isso chama o novo enum Weekdaye fornece cinco casos para lidar com os cinco dias
 da semana.
 **/
enum Weekday {
    case monday, tuesday, wednesday, thursday, friday
}


/** Agora podemos criar inst√¢ncias desse enum e atribuir outros casos poss√≠veis a ele: */
var day = Weekday.monday
day = .friday



/*
 =============================================================================================
 Type annotations
 =============================================================================================
 */

/**
 Voc√™ pode tentar for√ßar um tipo espec√≠fico para uma nova vari√°vel ou constante usando anota√ß√£o
 de tipo conforme abaixo:
 Sem a parte ": Double", Swift inferiria que √© um Int, mas estamos substituindo isso e dizendo
 que √© um Double.
 */
var score3: Double = 0


/** Aqui est√£o algumas "Type annotations com base nos tipos cobertos at√© agora: **/
let player: String = "Roy"
var luckyNumber: Int = 13
let pi: Double = 3.141
var isEnabled: Bool = true
var albums: Array<String> = ["Red", "Fearless"]
var user1: Dictionary<String, String> = ["id": "@twostraws"]
var books: Set<String> = Set(["The Bluest Eye", "Foundation"])


/**
 Arrays e dicion√°rios s√£o t√£o comuns que possuem uma sintaxe especial que √© mais
 f√°cil de escrever:
 */
var albums1: [String] = ["Red", "Fearless"]
var user2: [String: String] = ["id": "@twostraws"]



/**
 Conhecer os tipos exatos de coisas √© importante para criar cole√ß√µes vazias. Por exemplo,
 ambos criam arrays de strings vazios:
 */
var teams: [String] = [String]()
var clues = [String]()


/**
 Os valores de um enum t√™m o mesmo tipo que o pr√≥prio enum, ent√£o podemos escrever isso:
 */

enum UIStyle {
    case light, dark, system
}

var style: UIStyle = .light



/*
 =============================================================================================
 Condi√ß√µes
 =============================================================================================
 */

/**
 Use as instru√ß√µes if, else e else if para verificar uma condi√ß√£o e executar algum c√≥digo
 conforme apropriado:
 */
let age1 = 16

if age1 < 12 {
    print("You can't vote")
} else if age1 < 18 {
    print("You can vote soon.")
} else {
    print("You can vote now.")
}


/**
 Podemos usar && para combinar duas condi√ß√µes, e a condi√ß√£o inteira s√≥ ser√° verdadeira se as
 duas partes dentro forem verdadeiras. Alternativamente, || far√° com que uma condi√ß√£o seja
 verdadeira se qualquer uma das subcondi√ß√µes for verdadeira.
 */
let temp = 26

if temp > 20 && temp < 30 {
    print("It's a nice day.")
}




/*
 =============================================================================================
 Switch statements
 =============================================================================================
 */

/**
 O Swift nos permite verificar um valor em rela√ß√£o a v√°rias condi√ß√µes usando a sintaxe
 switch/case, conforme abaixo:
 Declara√ß√µes switch devem ser exaustivas: todos os valores poss√≠veis devem ser tratados
 para que voc√™ n√£o perca um por acidente.
 */
enum Weather {
    case sun, rain, wind
}

let forecast = Weather.sun

switch forecast {
    case .sun:
        print("A nice day.")
    case .rain:
        print("Pack an umbrella.")
    default:
        print("Should be okay.")
        
}



/*
 =============================================================================================
 O operador condicional tern√°rio
 =============================================================================================
 */

/**
 O operador tern√°rio nos permite verificar uma condi√ß√£o e retornar um de dois valores:
 algo se a condi√ß√£o for verdadeira e algo se for falsa:
 Quando esse c√≥digo for executado, canVote ser√° definido como ‚ÄúSim‚Äù porque age2 est√°
 definido como 18.
 */

let age2 = 18
let canVote = age2 >= 18 ? "Yes" : "No"




/*
 =============================================================================================
 Loops
 =============================================================================================
 */

/**
 Os loops for do Swift executam algum c√≥digo para cada item em uma cole√ß√£o ou em um intervalo
 personalizado. Por exemplo:
 */

let platforms = ["iOS", "macOS", "tvOS", "watchOS"]

for os in platforms {
    print("Swift works on \(os).")
}

/**
 Voc√™ tamb√©m pode fazer um loop em um intervalo de n√∫meros.
 */

for i in 1...12 {
    print("5 x \(i) is \(5 * i)")
}

/**
 1...12 cont√©m os valores de 1 a 12 inclusive. Se voc√™ quiser excluir o n√∫mero final, use ..< .
 */

for i in 1..<13 {
    print("5 x \(i) is \(5 * i)")
}

/**
 Dica: Se voc√™ n√£o precisar da vari√°vel de loop, use _:
 */

var lyric = "Haters gonna"

for _ in 1...5 {
    lyric += " hate"
}

print(lyric)


/**
 Existem tamb√©m loops while, que executam seu corpo de loop at√© que uma condi√ß√£o seja
 falsa, assim:
 */

var count = 10

while count > 0 {
    print("\(count)‚Ä¶")
    count -= 1
}

print("Go!")

/**
 Voc√™ pode usar "continue para pular a itera√ß√£o do loop atual e prosseguir para a seguinte:
 */
let files = ["me.jpg", "work.txt", "sophie.jpg"]

for file in files {
    if file.hasSuffix(".jpg") == false {
        continue
    }
    
    print("Found picture: \(file)")
}

/**
 Como alternativa, use breakpara sair de um loop e pular todas as itera√ß√µes restantes.
 */



/*
 =============================================================================================
 Fun√ß√µes
 =============================================================================================
 */

/**
 Para criar uma nova fun√ß√£o, escreva func seguido do nome da sua fun√ß√£o e adicione par√¢metros
 entre par√™nteses. Precisamos escrever "number: 5" na chamada da fun√ß√£o, pois o nome do
 par√¢metro faz parte da chamada da fun√ß√£o.
 */

func printTimesTables(number: Int) {
    for i in 1...12 {
        print("\(i) x \(number) is \(i * number)")
    }
}

printTimesTables(number: 5)


/**
 Para retornar dados de uma fun√ß√£o, diga ao Swift qual √© o tipo e, em seguida, use a
 palavra-chave return para envi√°-los de volta. Por exemplo, isso retorna uma rolagem
 de dados:
 */
func rollDice1() -> Int {
    return Int.random(in: 1...6)
}

let result = rollDice1()
print(result)



/**
 Se sua fun√ß√£o contiver apenas uma √∫nica linha de c√≥digo, voc√™ poder√° remover a
 palavra-chave return:
 */

func rollDice2() -> Int {
    Int.random(in: 1...6)
}



/*
 =============================================================================================
 Retornando v√°rios valores de fun√ß√µes
 =============================================================================================
 */

/**
 As tuplas armazenam um n√∫mero fixo de valores de tipos espec√≠ficos, o que √© uma maneira
 conveniente de retornar v√°rios valores de uma fun√ß√£o:
 */
func getUser()-> (firstName: String, lastName: String) {
    (firstName: "Taylor", lastName: "Swift")
}

let user3 = getUser()
print("Name: \(user3.firstName) \(user3.lastName)")


/**
 Se voc√™ n√£o precisar de todos os valores da tupla, voc√™ pode desestruturar a tupla
 para separ√°-la em valores individuais e, em seguida, _dizer ao Swift para ignorar alguns:
 */

let (firstName, _) = getUser()
print("Name: \(firstName)")



/*
 =============================================================================================
 Personalizando r√≥tulos de par√¢metros
 =============================================================================================
 */

/**
 Se voc√™ n√£o quiser passar o nome de um par√¢metro ao chamar uma fun√ß√£o, coloque um sublinhado
 antes dele:
 */

func isUppercase(_ string: String) -> Bool {
    string == string.uppercased()
}

let string = "HELLO, WORLD"
let result1 = isUppercase(string)

print(result1)


/**
 Uma alternativa √© escrever um segundo nome antes do primeiro: um para usar externamente e
 outro internamente. Nesse c√≥digo for √© usado externamente, e number √© usado internamente.
 */

func printTimesTables(for number: Int) {
    for i in 1...12 {
        print("\(i) x \(number) is \(i * number)")
    }
}

printTimesTables(for: 5)



/*
 =============================================================================================
 Fornecendo valores padr√£o para par√¢metros
 =============================================================================================
 */

/**
 Podemos fornecer valores de par√¢metro padr√£o escrevendo um igual ap√≥s o tipo e fornecendo um
 valor, como este:
 */
func greet(_ person: String, formal: Bool = false) {
    if formal {
        print("Welcome, \(person)!")
    } else {
        print("Hi, \(person)!")
    }
}

/**
 Agora podemos chamar greet()de duas maneiras:
 */
greet("Tim", formal: true)
greet("Taylor")



/*
 =============================================================================================
 Manipulando erros em fun√ß√µes
 =============================================================================================
 */

/**
 Para lidar com erros em fun√ß√µes, voc√™ precisa informar ao Swift quais erros podem ocorrer,
 escrever uma fun√ß√£o que possa gerar erros, cham√°-la e lidar com quaisquer problemas.
 
 Primeiro, defina os erros que podem ocorrer:
 */

enum PasswordError: Error {
    case short, obvious
}


/**
 Em seguida, escreva uma fun√ß√£o que possa gerar erros. Isso √© feito colocando throws no
 tipo da fun√ß√£o e usando throw para acionar erros espec√≠ficos:
 */
func checkPassword(_ password: String) throws -> String {
    if password.count < 5 {
        throw PasswordError.short
    }
    
    if password == "12345" {
        throw PasswordError.obvious
    }
    
    if password.count < 10 {
        return "OK"
    } else {
        return "Good"
    }
}



/**
 Agora chame a fun√ß√£o de lan√ßamento iniciando um bloco "do", chamando a fun√ß√£o usando "try"
 e capturando os erros que ocorrem:
 */

let string1 = "12345"

do {
    let result = try checkPassword(string1)
    print("Rating: \(result)")
} catch PasswordError.obvious {
    print("I have the same combination on my luggage")
} catch {
    print("There was an error.")
}

/**
 Quando se trata de capturar erros, voc√™ deve sempre ter um bloco catch
 que possa lidar com todo tipo de erro.
 */



/*
 =============================================================================================
 Closures
 =============================================================================================
 */

/**
 Voc√™ pode atribuir funcionalidade diretamente a uma constante ou vari√°vel como abaixo:
 Nesse c√≥digo, sayHello √© uma closure ‚Äì um peda√ßo de c√≥digo que podemos passar e
 chamar sempre que quisermos.
 */

let sayHello1 = {
    print("Hi there!")
}

sayHello1()


/**
 Se voc√™ quiser que o closure aceite par√¢metros, eles devem ser escritos dentro das chaves.
 O "in" √© usado para marcar o fim dos par√¢metros e o tipo de retorno ‚Äì tudo depois disso √©
 o pr√≥prio corpo do closure.
 */

let sayHello2 = { (name: String) -> String in
    "Hi \(name)!"
}

print(sayHello2("Mike"))


/**
 Closures s√£o usados ‚Äã‚Äãextensivamente no Swift. Por exemplo, h√° um m√©todo array chamado filter()
 que executa todos os elementos do array por meio de um teste, e qualquer um que retorne true
 para o teste √© retornado em um novo array.
 
 Podemos fornecer esse teste usando um encerramento, para que possamos filtrar um array para
 incluir apenas nomes que come√ßam com T. Dentro da closure listamos o par√¢metro filter() que
 nos passa, que √© uma string do array. Tamb√©m dizemos que nossa closure retorna um Boolean,
 ent√£o marcamos o in√≠cio do c√≥digo da closure usando "in" depois disso, todo o resto √©
 c√≥digo de fun√ß√£o normal.
 */

let team = ["Gloria", "Suzanne", "Tiffany", "Tasha"]


let onlyT1 = team.filter({ (name: String) -> Bool in
    return name.hasPrefix("T")
})
print(onlyT1)


/*
 =============================================================================================
 Closures √† direita e sintaxe abreviada
 =============================================================================================
 */


/**
 Swift tem alguns truques na manga para tornar as closures mais f√°ceis de ler. Aqui est√° um
 c√≥digo que filtra um array para incluir apenas nomes que come√ßam com ‚ÄúT‚Äù:
 */

let team1 = ["Gloria", "Suzanne", "Tiffany", "Tasha"]

let onlyT2 = team1.filter({ (name: String) -> Bool in
    return name.hasPrefix("T")
})

print(onlyT2)


/**
 Imediatamente voc√™ pode ver que o corpo da closure tem apenas uma √∫nica linha de c√≥digo,
 ent√£o podemos remover return:
 */

let onlyT3 = team.filter({ (name: String) -> Bool in
    name.hasPrefix("T")
})


/**
 filter() deve receber uma fun√ß√£o que aceite um item de seu array e retorne true se deveria
 estar no array retornado.
 
 Como a fun√ß√£o que passamos deve se comportar assim, n√£o precisamos especificar os tipos em
 nossa closure. Ent√£o, podemos reescrever o c√≥digo para isso:
 */

let onlyT4 = team.filter({ name in
    name.hasPrefix("T")
})


/**
 Podemos ir al√©m usando uma sintaxe especial chamada sintaxe de closure √† direita, que
 se parece com isso:
 */

let onlyT5 = team.filter { name in
    name.hasPrefix("T")
}


/**
 Por fim, o Swift pode fornecer nomes de par√¢metros curtos para n√≥s, para que nem escrevamos
 "name in" mais e, em vez disso, confiemos em um valor especialmente nomeado fornecido para
 n√≥s: $0:
 */

let onlyT = team.filter {
    $0.hasPrefix("T")
}



/*
 =============================================================================================
 Structs
 =============================================================================================
 */

/**
 Structs nos permite criar nossos pr√≥prios tipos de dados personalizados, completos com suas
 pr√≥prias propriedades e m√©todos. Quando criamos inst√¢ncias de structs, fazemos isso usando um
 inicializador ‚Äì o Swift nos permite tratar nossa struct como uma fun√ß√£o, passando par√¢metros
 para cada uma de suas propriedades. Ele gera silenciosamente esse inicializador de membro com
 base nas propriedades do struct. Se voc√™ quiser que o m√©todo de um struct altere uma de suas
 propriedades, marque-o como mutating.
 */

struct Album {
    let title: String
    let artist: String
    var isReleased = true
    
    func printSummary() {
        print("\(title) by \(artist)")
    }
    
    mutating func removeFromSale() {
        isReleased = false
    }
}

let red = Album(title: "Red", artist: "Taylor Swift")
print(red.title)
red.printSummary()



/*
 =============================================================================================
 Propriedades computadas
 =============================================================================================
 */

/**
 Uma propriedade computada calcula seu valor toda vez que √© acessada. Por exemplo, podemos
 escrever uma struct Employee que rastreie quantos dias de f√©rias restaram para esse funcion√°rio.
 Para poder ler/escrever vacationRemaining, precisamos fornecer um getter e um setter e newValue
 √© fornecido pelo Swift e armazena o valor que o usu√°rio estava atribuindo √† propriedade.
 */

struct Employee {
    let name: String
    var vacationAllocated = 14
    var vacationTaken = 0
    
    var vacationRemaining: Int {
        get {
            vacationAllocated - vacationTaken
        }

        set {
            vacationAllocated = vacationTaken + newValue
        }
    }
}



/*
 =============================================================================================
 Observadores de propriedade
 =============================================================================================
*/

/**
 Os observadores de propriedade s√£o peda√ßos de c√≥digo que s√£o executados quando as propriedades
 s√£o alteradas: s√£o executados "didSet" quando a propriedade acabou de ser alterada e executados
 "willSet" antes da altera√ß√£o da propriedade.

 Poder√≠amos demonstrar "didSet" fazendo uma struct Game imprimir uma mensagem quando a pontua√ß√£o muda
 e "willSet" antes da mudan√ßa:
*/

struct Game {
    var score = 0 {
        willSet {
            print("Score : \(score)")
        }
        
        didSet {
            print("Score is now \(score)")
        }
    }
    
}

var game = Game()
game.score += 10
game.score -= 3



/*
 =============================================================================================
 Inicializadores personalizados
 =============================================================================================
*/

/**
 Inicializadores s√£o fun√ß√µes especiais que preparam uma nova inst√¢ncia de struct a ser usada,
 garantindo que todas as propriedades tenham um valor inicial.

 O Swift gera um baseado nas propriedades do struct, mas voc√™ pode criar o seu pr√≥prio.
 
 Importante: os inicializadores n√£o t√™m "func" antes deles e n√£o retornam explicitamente um valor.
*/

struct Player {
    let name: String
    let number: Int

    init(name: String) {
        self.name = name
        number = Int.random(in: 1...99)
    }
}



/*
 =============================================================================================
 Controle de acesso
 =============================================================================================
*/

/**
 O Swift tem v√°rias op√ß√µes para controle de acesso dentro de structs, mas quatro s√£o as mais comuns:

 - Use private para "n√£o deixe nada fora do struct usar isso."
 - Use private(set) para ‚Äúqualquer coisa fora do struct pode ler isso, mas n√£o deixe que eles alterem‚Äù.
 - Use fileprivate para "n√£o deixe nada fora do arquivo atual usar isso".
 - Use public para ‚Äúdeixe qualquer um, em qualquer lugar usar isso‚Äù.
 Por exemplo a struct BankAccount abaixo:
 
 Como usamos private(set), ler funds de fora da estrutura √© bom, mas escrever n√£o √© poss√≠vel.
*/

struct BankAccount {
    private(set) var funds = 0

    mutating func deposit(amount: Int) {
        funds += amount
    }

    mutating func withdraw(amount: Int) -> Bool {
        if funds > amount {
            funds -= amount
            return true
        } else {
            return false
        }
    }
}


/*
 =============================================================================================
 Propriedades e m√©todos est√°ticos
 =============================================================================================
*/

/**
 O Swift suporta propriedades e m√©todos est√°ticos, permitindo que voc√™ adicione uma propriedade
 ou m√©todo diretamente ao pr√≥prio struct ao inv√©s de uma inst√¢ncia do struct:
 
 Usando essa abordagem, em todos os lugares que precisamos verificar ou exibir algo como o n√∫mero
 da vers√£o do aplicativo, podemos ler AppData.version.
 */

struct AppData {
    static let version = "1.3 beta 2"
    static let settings = "settings.json"
}



/*
 =============================================================================================
 Classes
 =============================================================================================
*/

/**
 As classes nos permitem criar tipos de dados personalizados e s√£o diferentes das structs
 de cinco maneiras.

 A primeira diferen√ßa √© que podemos criar classes herdando funcionalidades de outras classes.
*/

class Employee1 {
    let hours: Int

    init(hours: Int) {
        self.hours = hours
    }

    func printSummary() {
        print("I work \(hours) hours a day.")
    }
}

/**
 Se uma classe filha quiser alterar um m√©todo de uma classe pai, ela deve usar override:
*/

class Developer: Employee1 {
    //Utilizando override para alterar a classe printSummary herdada de Employee1
    override func printSummary() {
        print("I spend \(hours) hours a day searching Stack Overflow.")
    }
    
    func work() {
        print("I'm coding for \(hours) hours.")
    }
}

let novall = Developer(hours: 8)
novall.work()
novall.printSummary()


/**
 A segunda diferen√ßa √© que os inicializadores s√£o mais complicados com classes.
 H√° muita complexidade aqui, mas h√° tr√™s pontos principais:

 1 - Swift n√£o ir√° gerar um inicializador de membro para classes.
 
 2 - Se uma classe filha tiver inicializadores personalizados, ela sempre deve
 chamar o inicializador do pai depois de terminar de configurar suas pr√≥prias
 propriedades.
 
 3 - Se uma subclasse n√£o tiver inicializadores, ela herdar√° automaticamente os
 inicializadores de sua classe pai. Por exemplo:
*/

class Vehicle {
    let isElectric: Bool

    init(isElectric: Bool) {
        self.isElectric = isElectric
    }
}

class Car: Vehicle {
    let isConvertible: Bool

    init(isElectric: Bool, isConvertible: Bool) {
        self.isConvertible = isConvertible
        super.init(isElectric: isElectric)
    }
}

/**
 "super" nos permite chamar m√©todos que pertencem √† nossa classe pai, como seu inicializador.

 A terceira diferen√ßa √© que todas as c√≥pias de uma inst√¢ncia de classe compartilham seus dados,
 o que significa que as altera√ß√µes feitas em uma delas alterar√£o automaticamente as outras c√≥pias.

 Por exemplo:
*/

class Singer {
    var name = "Adele"
}

var singer1 = Singer()
var singer2 = singer1
singer2.name = "Justin"
print(singer1.name)
print(singer2.name)


/**
 Isso imprimir√° ‚ÄúJustin‚Äù para ambos ‚Äì embora tenhamos alterado apenas um deles, o outro tamb√©m
 mudou. Em compara√ß√£o, as c√≥pias de struct n√£o compartilham seus dados.

 A quarta diferen√ßa √© que as classes podem ter um desinicializador que √© chamado quando a √∫ltima
 refer√™ncia a um objeto √© destru√≠da.

 Assim, poder√≠amos criar uma classe que imprima uma mensagem quando for criada e destru√≠da:
*/

class User1 {
    let id: Int

    init(id: Int) {
        self.id = id
        print("User \(id): I'm alive!")
    }

    deinit {
        print("User \(id): I'm dead!")
    }
    
    
}

for i in 1...3 {
    let user = User1(id: i)
    print("User \(user.id): I'm in control!")
}


/**
 A diferen√ßa final √© que as classes nos permitem alterar as propriedades das vari√°veis
 mesmo quando a pr√≥pria classe √© constante:
 
 Como resultado disso, as classes n√£o precisam da palavra-chave  "mutating" com m√©todos
 que alteram seus dados.
*/

class User2 {
    var name = "Paul"
}

let user4 = User2()
user4.name = "Taylor"
print(user4.name)



/*
 =============================================================================================
 Protocols
 =============================================================================================
*/

/**
 Os protocolos definem a funcionalidade que esperamos que um tipo de dados suporte, e o Swift
 garante que nosso c√≥digo siga essas regras.

 Por exemplo, poder√≠amos definir um protocolo Vehicle.
 
 Isso lista os m√©todos necess√°rios para que esse protocolo funcione, mas n√£o cont√©m nenhum c√≥digo
 ‚Äì estamos especificando apenas nomes de m√©todos, par√¢metros e tipos de retorno.

 Depois de ter um protocolo, voc√™ pode ajustar os tipos de dados a ele implementando a funcionalidade
 necess√°ria. Por exemplo, podemos fazer uma struct Car que esteja em conformidade com Vehicle.
 
 Todos os m√©todos listados em Vehicle devem existir exatamente em Car, com o mesmo nome, par√¢metros
 e tipos de retorno.

 Agora voc√™ pode escrever uma fun√ß√£o que aceita qualquer tipo de tipo que esteja em conformidade
 com Vehicle, porque o Swift sabe que implementa tanto estimateTime() e travel():
 
 Os protocolos tamb√©m podem exigir propriedades, ent√£o podemos exigir propriedades para quantos
 assentos os ve√≠culos t√™m e quantos passageiros eles t√™m atualmente:
 
 Isso adiciona duas propriedades: uma marcada com "get" isso pode ser uma propriedade constante ou
 computada, e outra marcada com "get set" isso pode ser uma vari√°vel ou uma propriedade computada
 com um getter e setter.

 Agora todos os tipos em conformidade devem adicionar implementa√ß√µes dessas duas propriedades,
 como esta para Car.
 
 Dica: Voc√™ pode se adequar a quantos protocolos precisar, apenas listando-os separados por v√≠rgula.
 
*/

protocol Vehicle1 {
    var name: String { get }
    var currentPassengers: Int { get set }
    func estimateTime(for distance: Int) -> Int
    func travel(distance: Int)
}

struct Car1: Vehicle1 {
    let name = "Car"
    var currentPassengers = 1
    
    func estimateTime(for distance: Int) -> Int {
        distance / 50
    }

    func travel(distance: Int) {
        print("I'm driving \(distance)km.")
    }
}

func commute(distance: Int, using vehicle: Vehicle1) {
    if vehicle.estimateTime(for: distance) > 100 {
        print("Too slow!")
    } else {
        vehicle.travel(distance: distance)
    }
}

let car = Car1()
commute(distance: 100, using: car)



/*
 =============================================================================================
 Extens√µes
 =============================================================================================
*/

/**
 1 - Extens√µes nos permitem adicionar funcionalidade a qualquer tipo. Por exemplo, as strings do
 Swift t√™m um m√©todo para cortar espa√ßos em branco e novas linhas, mas √© bem longo para que
 possamos transform√°-lo em uma extens√£o.
 
 2 - Se voc√™ quiser alterar um valor diretamente em vez de retornar um novo valor, marque seu m√©todo
 "mutating".
 
 3 - As extens√µes tamb√©m podem adicionar propriedades computadas aos tipos.
 
 4 - O m√©todo components(separatedBy:) divide uma string em um array de strings usando um limite de
 nossa escolha, que neste caso s√£o novas linhas.
 
 Agora podemos usar essa propriedade com todas as strings:
 
*/

//1 Criando novos m√©todo em String.
extension String {
    //3 Adicionando propriedades computadas
    var lines: [String] {
           //4 Utilizando o m√©todo components(separatedBy:) para dividir a string.
           self.components(separatedBy: .newlines)
       }
    
    func trimmed() -> String {
        self.trimmingCharacters(in: .whitespacesAndNewlines)
    }
    
    //2 marcando m√©todo como mutating para alterar valor.
    mutating func trim() {
           self = self.trimmed()
    }
}

var quote1 = "   The truth is rarely pure and never simple   "
let trimmed = quote1.trimmed()
quote1.trim()

let lyrics = """
But I keep cruising
Can't stop, won't stop moving
"""

print(lyrics.lines.count)



/*
 =============================================================================================
 Entens√µes de protocolo
 =============================================================================================
*/

/**
 As extens√µes de protocolo estendem um protocolo inteiro para adicionar propriedades computadas
 e implementa√ß√µes de m√©todos, de modo que quaisquer tipos em conformidade com esse protocolo as
 obt√™m.

 Por exemplo, Array, Dictionary, e Set todos est√£o em conformidade com o Collection protocolo,
 ent√£o podemos adicionar uma propriedade computada a todos os tr√™s assim:
*/

extension Collection {
    var isNotEmpty: Bool {
        isEmpty == false
    }
}

/**
 Agora podemos coloc√°-lo em uso:
*/

let guests = ["Mario", "Luigi", "Peach"]

if guests.isNotEmpty {
    print("Guest count: \(guests.count)")
}

/**
 Essa abordagem significa que podemos listar os m√©todos necess√°rios em um protocolo e adicionar
 implementa√ß√µes padr√£o daqueles dentro de uma extens√£o de protocolo. Todos os tipos em conformidade
 podem usar essas implementa√ß√µes padr√£o ou fornecer suas pr√≥prias conforme necess√°rio.
*/



/*
 =============================================================================================
 Opcionais
 =============================================================================================
*/

/**
 Opcionais representam a aus√™ncia de dados ‚Äì por exemplo, eles distinguem entre um inteiro com
 o valor 0 e nenhum valor.

 Para ver opcionais em a√ß√£o, pense neste c√≥digo:
*/

let opposites = [
    "Mario": "Wario",
    "Luigi": "Waluigi"
]

let peachOpposite = opposites["Peach"]

/**
 Que tenta ler o valor anexado √† chave ‚ÄúPeach‚Äù, que n√£o existe, ent√£o n√£o pode ser uma string
 normal. A solu√ß√£o do Swift √© chamada de optionals , o que significa dados que podem estar
 presentes ou n√£o.

 Uma string opcional pode ter uma string esperando por n√≥s, ou pode n√£o haver nada ‚Äì um valor
 especial chamado nil, que significa ‚Äúsem valor‚Äù. Qualquer tipo de dado pode ser opcional,
 incluindo Int, Double e Bool, bem como inst√¢ncias de enums, structs e classes.

 O Swift n√£o nos permite usar dados opcionais diretamente, porque eles podem estar vazios. Isso
 significa que precisamos desembrulhar o opcional para us√°-lo ‚Äì precisamos olhar para dentro
 para ver se h√° um valor e, se houver, retir√°-lo e us√°-lo.

 Swift nos d√° v√°rias maneiras de desembrulhar opcionais, mas o que voc√™ ver√° mais se parece
 com isso:
*/

if let marioOpposite = opposites["Mario"] {
    print("Mario's opposite is \(marioOpposite)")
}

/**
 Isso l√™ o valor opcional do dicion√°rio e, se tiver uma string dentro, √© desempacotado ‚Äì a
 string dentro √© colocada na constante marioOpposite e n√£o √© mais opcional. Como conseguimos
 desempacotar o opcional, a condi√ß√£o √© um sucesso, ent√£o o c√≥digo print() √© executado.
*/



/*
 =============================================================================================
 Desembrulhando opcionais com prote√ß√£o
 =============================================================================================
*/

/*
 Swift tem uma segunda maneira de desempacotar opcionais, chamada guard let, que √© muito
 semelhante if let, exceto que inverte as coisas: if let executa o c√≥digo dentro de suas
 chaves se o opcional tiver um valor e guard let executa o c√≥digo se o opcional n√£o tiver
 um valor.

 Se parece com isso:
*/

func printSquare(of number: Int?) {
    guard let number = number else {
        print("Missing input")
        return
    }

    print("\(number) x \(number) is \(number * number)")
}


/**
 Se voc√™ usar guard para verificar se as entradas de uma fun√ß√£o s√£o v√°lidas, o Swift exigir√°
 que voc√™ use return se a verifica√ß√£o falhar. No entanto, se o opcional que voc√™ est√°
 desempacotando tiver um valor dentro, voc√™ poder√° us√°-lo ap√≥s a conclus√£o do c√≥digo guard.

 Dica: Voc√™ pode usar guard com qualquer condi√ß√£o, incluindo aquelas que n√£o abrem opcionais.
*/



/*
 =============================================================================================
 Nil coalescing
 =============================================================================================
*/

/**
 O Swift tem uma terceira maneira de desempacotar opcionais, chamada de operador nil coalescing
 ‚Äì ele desempacota um opcional e fornece um valor padr√£o se o opcional estiver vazio:
*/

let tvShows = ["Archer", "Babylon 5", "Ted Lasso"]
let favorite = tvShows.randomElement() ?? "None"


/**
 O operador nil coalescing √© √∫til em muitos lugares em que opcionais s√£o criados. Por exemplo,
 criar um inteiro a partir de uma string retorna um opcional Int? porque a convers√£o pode ter
 falhado. Aqui podemos usar nil coalescing para fornecer um valor padr√£o:
*/

let input = ""
let number1 = Int(input) ?? 0
print(number1)


/*
 =============================================================================================
 Optional chaining
 =============================================================================================
*/

/**
 Optional chaining l√™ opcionais dentro de opcionais, assim:
*/

let names = ["Arya", "Bran", "Robb", "Sansa"]
let chosen = names.randomElement()?.uppercased()
print("Next in line: \(chosen ?? "No one")")

/**
 O optional chaining existe na linha 1397: um ponto de interroga√ß√£o seguido por mais c√≥digo.
 Ele nos permite dizer ‚Äúse o opcional tiver um valor dentro, desembrulhe-o ent√£o‚Ä¶‚Äù e adicione
 mais c√≥digo. No nosso caso, estamos dizendo ‚Äúse obtivermos um elemento aleat√≥rio do array,
 coloque-o em mai√∫scula‚Äù.
*/



/*
 =============================================================================================
 Optional try?
 =============================================================================================
*/

/**
 Ao chamar uma fun√ß√£o que pode gerar erros, podemos usar try? para converter seu resultado em um
 opcional contendo um valor em caso de sucesso ou n√£o nil.

 Veja como fica:
*/

enum UserError: Error {
    case badID, networkFailed
}

func getUser(id: Int) throws -> String {
    throw UserError.networkFailed
}

if let user = try? getUser(id: 23) {
    print("User: \(user)")
}

/**
 A fun√ß√£o getUser() sempre lan√ßar√° networkFailed, mas n√£o nos importamos com o que foi lan√ßado - tudo o que nos importa √© se a chamada enviou de volta um usu√°rio ou n√£o.
*/
